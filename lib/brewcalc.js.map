{"version":3,"sources":["webpack://brewcalc/webpack/universalModuleDefinition","webpack://brewcalc/webpack/bootstrap","webpack://brewcalc/./src/brewcalc.js","webpack://brewcalc/./src/hops.js","webpack://brewcalc/./src/index.js","webpack://brewcalc/./src/mash.js","webpack://brewcalc/./src/types/fermentable.js","webpack://brewcalc/./src/types/hop.js","webpack://brewcalc/./src/types/mashStep.js","webpack://brewcalc/./src/types/recipe.js","webpack://brewcalc/./src/types/yeast.js","webpack://brewcalc/./src/utils.js","webpack://brewcalc/./src/volumes.js","webpack://brewcalc/./src/waterChem.js"],"names":["originalGravity","batchSize","ogPts","litersToGallons","finalGravity","fgPts","boilGravity","boilSize","og","fermentableGravityPoints","potential","amount","efficiency","kgToPounds","fermentableEfficiency","type","equipmentEfficiency","sugarEfficiency","FermentableTypes","extract","sugar","dryExtract","gravityPoints","fermentables","attenutation","sum","map","estABW","estABV","estABVrealExtract","fg","oe","sgToPlato","ae","re","abw","abv","mcu2srm","mcu","Math","pow","calcMCU","color","srmToRgb","srm","r","round","min","max","g","b","colorSRM","postBoilVolime","srmToCss","yeastNeeded","pitchRate","e","viability","currentDate","cultureDate","Date","toString","floor","parse","yeastCount","cellDensity","slurryDensity","form","YeastForms","dry","liquid","slant","Error","yeastGrowth","ratio","growthRateCurveBraukaiserStir","yeastStarterGrow","startingYeastCount","starterSize","gravity","volumeLevel","pointsNeeded","poundsDME","gramsDME","poundsTokg","cellsToGramsRatio","growthRate","endingCount","kegPressure","carbVolume","t","primingSugar","normalizeTemp","celsiusToFahrenheit","carbonation","kegSugar","cornSugar","dme","caloriesAlc","caloriesExt","calcCalories","aromaFactor","use","HopUse","aroma","dryHop","ibuUtilization","avgBoilGravityPts","boilTime","pelletFactor","E","bitternessIbuTinseth","hops","postBoilVolume","alpha","time","HopForms","pellet","kgToOunces","bitternessRatio","ibu","gu","ragerHopGravityAdjustment","sgb","ragerUtil","tanh","ragerHopIbuFromWeight","util","wt","vol","ga","wtFactor","ragerHopIbu","sg","bitternessIbuRager","calculateRecipeBeerJSON","batch_size","boil_size","boil_time","ingredients","mash","value","brewHouseEff","brewhouse","yeasts","fermentable_bill","hop_bill","culture_additions","isNotEmptyArray","item","capitalize","alpha_acid_units","attenuation","mashSteps","mash_steps","infuseAmount","infuse_amount","calculateRecipe","colorSRMvalue","volumes","Number","toFixed","calories","caloriesInOneL","ouncesToLiters","calculateVolumes","stats","grainVolume","maltSpecificHeat","tunDeadspace","boilTemp","calcTotVolume","mashGrainWeight","startVolume","adjustTunMass","tunVolume","totVolume","tunMass","decoctVolume","targetTemp","startTemp","tunSpecificHeat","adjustedTunMass","fraction","infuseTemp","mashInTemp","grainTemp","tunTemp","mashRecalculate","equipAdjust","tunWeight","calcInfuseStepAmount","i","calcTotalInfusedOnStepAmount","slice","reduce","pv","cv","index","MashType","decoction","name","stepTemp","infuseStepAmount","totalInfusedOnStepAmount","result","infusion","infussionTemp","decoctionAmount","grain","adjunct","boil","firstWort","plug","leaf","temperature","RecipeTypes","partialMash","allGrain","YeastTypes","ale","lager","wheat","wine","champagne","culture","k","p","litersToOunces","l","o","fahrenheitToCelsius","f","c","kpaToPsi","kpa","psiTokpa","psi","platoTosg","srmToEbc","ebcToSrm","ebc","srmToLovibond","lovibondToSrm","lovibond","array","scaleIngredients","scaleFactor","scaleRecipe","str","words","split","capitalizedWords","word","charAt","toUpperCase","join","arr","Array","isArray","length","lauterDeadspace","evapRate","coolingLossPct","trubChillerLoss","topUpKettle","BIAB","fermentationLoss","grainAbsorbtionRatio","grainAbsorbtion","totalMashWaterAdds","mashVolumeNeeded","waterAvailFromMash","spargeVol","estPreBoilVolume","boilOffVolume","coolingShrinkage","estBottlingVol","totalWater","dilute","dilution","alkalinity","adjustmentsFromSalts","CaCO3","NaHCO3","CaSO4","CaCl2","MgSO4","NaCl","adjCa","adjMg","adjSO4","adjNa","adjCl","adjHCO3","Ca","Mg","SO4","Na","Cl","HCO3","calcWaterChemistry","source","target","salts","adjustmentsFromSaltsWater","dilutedWater","adjustedWater","difference","sulphateChlorideRatio"],"mappings":"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","file":"brewcalc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"brewcalc\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"brewcalc\"] = factory();\n\telse\n\t\troot[\"brewcalc\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","// @flow\nimport { FermentableTypes } from './types/fermentable'\nimport type { Fermentable } from './types/fermentable'\nimport {\n  litersToGallons,\n  kgToPounds,\n  poundsTokg,\n  sgToPlato,\n  sum,\n  celsiusToFahrenheit\n} from './utils.js'\nimport type { Yeast } from './types/yeast'\nimport { YeastForms } from './types/yeast'\n\nexport const originalGravity = (batchSize: number, ogPts: number) =>\n  1.0 + ogPts / litersToGallons(batchSize)\n\nexport const finalGravity = (batchSize: number, fgPts: number) =>\n  1.0 + fgPts / litersToGallons(batchSize)\n\nexport const boilGravity = (batchSize: number, boilSize: number, og: number) =>\n  1 + ((og - 1) * litersToGallons(batchSize)) / litersToGallons(boilSize)\n\n// Sugar provides 46 gravity points per pound, per gallon (PPPG).\n// 1 pound = 16 oz (weight/mass)\n// 1 gallon = 128 fl oz\n// yield and efficiency should be parsed from recipe as percent values\n// The maximum potential is approximately 1.046 which would be a pound of pure sugar in a gallon of water.\n\nconst fermentableGravityPoints = (potential, amount, efficiency = 1) =>\n  (potential - 1) * kgToPounds(amount) * efficiency\n\nconst fermentableEfficiency = (\n  type,\n  equipmentEfficiency,\n  sugarEfficiency = 1\n) =>\n  type === FermentableTypes.extract ||\n  type === FermentableTypes.sugar ||\n  type === FermentableTypes.dryExtract\n    ? sugarEfficiency\n    : equipmentEfficiency\n\nexport const gravityPoints = (\n  fermentables: Array<Fermentable>,\n  efficiency: number,\n  attenutation: number = 0\n) =>\n  sum(\n    fermentables.map(({ type, potential, amount }) =>\n      fermentableGravityPoints(\n        potential,\n        amount,\n        (1 - attenutation) * fermentableEfficiency(type, efficiency)\n      )\n    )\n  )\n\n// http://byo.com/bock/item/408-calculating-alcohol-content-attenuation-extract-and-calories-advanced-homebrewing\n// https://www.brewersfriend.com/2011/06/16/alcohol-by-volume-calculator-updated/\n// ABW = (OG points - FG points) * 0.105\n// ABV = (OG points - FG points) * 0.132\nexport const estABW = (ogPts: number, fgPts: number) => (ogPts - fgPts) * 0.105\nexport const estABV = (ogPts: number, fgPts: number) => (ogPts - fgPts) * 0.132\n\n// http://beersmith.com/blog/2010/09/07/apparent-and-real-attenuation-for-beer-brewers-part-1/\nexport const estABVrealExtract = (og: number, fg: number) => {\n  const oe = sgToPlato(og)\n  const ae = sgToPlato(fg)\n  const re = 0.1808 * oe + 0.8192 * ae\n  const abw = (oe - re) / (2.0665 - 0.010665 * oe)\n  const abv = abw * (fg / 0.79661)\n\n  return abv\n}\n\n// MCU = (weight of grain in lbs)*(color of grain in lovibond) / (volume in gal) SRM = 1.4922 * MCU ^ 0.6859\nconst mcu2srm = mcu => 1.4922 * Math.pow(mcu, 0.6859)\n\nconst calcMCU = ({ amount, color }: Fermentable) => kgToPounds(amount) * color\n\nexport const srmToRgb = (srm: number) => ({\n  r: Math.round(Math.min(255, Math.max(0, 255 * Math.pow(0.975, srm)))),\n  g: Math.round(Math.min(255, Math.max(0, 255 * Math.pow(0.88, srm)))),\n  b: Math.round(Math.min(255, Math.max(0, 255 * Math.pow(0.7, srm))))\n})\nexport const colorSRM = (\n  fermentables: Array<Fermentable>,\n  postBoilVolime: number\n) => mcu2srm(sum(fermentables.map(calcMCU)) / litersToGallons(postBoilVolime))\n\nexport const srmToCss = (srm: number) => {\n  const color = srmToRgb(srm)\n\n  return `rgb(${color.r}, ${color.g}, ${color.b})`\n}\n\n// https://www.brewersfriend.com/yeast-pitch-rate-and-starter-calculator/\n\n// million cells / ml / degree Plato\n\n// Minimum manufacturer's recommendation: 0.35 (ale only, fresh yeast only)\n// Middle of the road Pro Brewer 0.75 (ale)\n// Pro Brewer 1.00 (high gravity ale)\n// Pro Brewer 1.50 (minimum for lager)\n// Pro Brewer 2.0 (high gravity lager)\n\n// cellDensity = billion cells / gram\n// Safale K-97\t14\n// Safale S-04\t8\n// Safbrew T-58\t18\n// Safbrew S-33\t16\n// Saflager S-23\t10\n// Saflager S-189\t9\n\n// A pack/vial contains 100 billion cells at the date of manufacture.\n// Liquid yeast viability drops 21% each month, or 0.7% each day, from the date of manufacture.\n// The assumption is the yeast viability drops in a linear fashion. In 4.75 months or 143 days, this calculator assumes the yeast is 100% dead (100 / 0.7 = ~143).\n\n// million 10 ^ 6\n// billion 10 ^ 9\n\nexport const yeastNeeded = (pitchRate: number, batchSize: number, e: number) =>\n  (pitchRate * (batchSize * 1000) * e) / 1000\n\nconst viability = (\n  currentDate: string,\n  cultureDate: string = new Date().toString()\n) =>\n  100 -\n  Math.floor((Date.parse(currentDate) - Date.parse(cultureDate)) / 86400000) *\n    0.7\n\nexport const yeastCount = (\n  { amount, form, cultureDate }: Yeast,\n  currentDate: string = new Date().toString(),\n  cellDensity: number = 8,\n  // billion cells / ml\n  slurryDensity: number = 1\n) => {\n  switch (form) {\n    case YeastForms.dry:\n      return cellDensity * amount * 1000\n    case YeastForms.liquid:\n      return 100 * (viability(currentDate, cultureDate) / 100) * amount\n    case YeastForms.slant:\n      return slurryDensity * amount * 1000\n    default:\n      throw new Error('NotImplementedError')\n  }\n}\n\nconst yeastGrowth = ratio => 2.33 - 0.67 * ratio\n\nconst growthRateCurveBraukaiserStir = (ratio: number) =>\n  ratio < 1.4\n    ? 1.4\n    : ratio >= 1.4 && ratio <= 3.5 && yeastGrowth(ratio) > 0\n    ? yeastGrowth(ratio)\n    : 0\n\nexport const yeastStarterGrow = (\n  startingYeastCount: number,\n  starterSize: number,\n  gravity: number,\n  batchSize: number\n) => {\n  const volumeLevel = litersToGallons(starterSize)\n  const pointsNeeded = volumeLevel * (gravity - 1) * 1000\n  const poundsDME = pointsNeeded / 42\n  const gramsDME = poundsTokg(poundsDME) * 1000\n  const cellsToGramsRatio = startingYeastCount / gramsDME\n\n  const growthRate = growthRateCurveBraukaiserStir(cellsToGramsRatio)\n  const endingCount = gramsDME * growthRate + startingYeastCount\n  const pitchRate =\n    (endingCount * 1000) / sgToPlato(gravity) / (batchSize / 1000)\n\n  return {\n    growthRate: growthRate,\n    endingCount: endingCount,\n    pitchRate: pitchRate\n  }\n}\n\n// https://byo.com/yeast/item/164-balancing-your-draft-system-advanced-brewing\nconst kegPressure = (carbVolume: number, t: number) =>\n  Math.max(\n    0,\n    -16.6999 -\n      0.0101059 * t +\n      0.00116512 * t * t +\n      0.173354 * t * carbVolume +\n      4.24267 * carbVolume -\n      0.0684226 * carbVolume * carbVolume\n  )\n\n// http://www.homebrewtalk.com/showthread.php?t=441383\nconst primingSugar = (carbVolume, t, batchSize) =>\n  15.195 * batchSize * (carbVolume - 3.0378 + 5.0062e-2 * t - 2.6555e-4 * t * t)\n\nconst normalizeTemp = (t: number) => Math.max(32.0, celsiusToFahrenheit(t))\n\nexport const carbonation = (\n  carbVolume: number,\n  t: number,\n  batchSize: number\n) => {\n  const sugar = primingSugar(\n    carbVolume,\n    normalizeTemp(t),\n    litersToGallons(batchSize)\n  )\n\n  return {\n    kegPressure: kegPressure(carbVolume, normalizeTemp(t)),\n    kegSugar: sugar * 0.5,\n    cornSugar: sugar,\n    dme: sugar * 1.538\n  }\n}\n\n// http://beersmith.com/blog/2011/02/04/counting-calories-in-your-homebrewed-beer/\n// Calorie_from_alcohol = 1881.22 * FG * (OG-FG)/(1.775-OG)\n// Calories_from_carbs = 3550.0 * FG * ((0.1808 * OG) + (0.8192 * FG) – 1.0004)\n// Total calories – just add the Calories_from_alcohol to Calories_from_carbs\n\nconst caloriesAlc = (og, fg) => 1881.22 * fg * ((og - fg) / (1.775 - og))\nconst caloriesExt = (og, fg) =>\n  3550.0 * fg * (0.1808 * og + 0.8192 * fg - 1.0004)\n\nexport const calcCalories = (og: number, fg: number) =>\n  caloriesAlc(og, fg) + caloriesExt(og, fg)\n","// @flow\nimport { sum, kgToOunces, litersToGallons } from './utils.js'\nimport type { Hop } from './types/hop'\nimport { HopForms, HopUse } from './types/hop'\n\nconst aromaFactor = use =>\n  use === HopUse.aroma || use === HopUse.dryHop ? 0 : 1\n\nconst ibuUtilization = (\n  avgBoilGravityPts: number,\n  boilTime: number,\n  pelletFactor: number\n) =>\n  (pelletFactor *\n    1.65 *\n    Math.pow(0.000125, avgBoilGravityPts) *\n    (1 - Math.pow(Math.E, -0.04 * boilTime))) /\n  4.15\n\n// Glenn Tinseth developed the following formula to calculate bitterness in IBUs:\n// IBU = (U * ozs hops * 7490)/Volume (in gallons) U represents the utilization of the hops (conversion to iso-alpha-acids) based on boil time and wort gravity.\n// U = bigness factor * boil time factor\n\nexport const bitternessIbuTinseth = (\n  hops: Array<Hop>,\n  avgBoilGravityPts: number,\n  postBoilVolume: number\n) =>\n  sum(\n    hops.map(\n      ({ amount, alpha, form, time, use }) =>\n        ((ibuUtilization(\n          avgBoilGravityPts,\n          time,\n          form === HopForms.pellet ? 1.1 : 1\n        ) *\n          kgToOunces(amount) *\n          alpha *\n          7490) /\n          litersToGallons(postBoilVolume)) *\n        aromaFactor(use)\n    )\n  )\n\n// The preceived bitterness expressed in a ratio of IBUs to gravity. This is frequently seen expressed as BU/GU.\n// The Gravity Units are the decimal portion of the original gravity\nexport const bitternessRatio = (ibu: number, gu: number) => ibu / gu\n\n// rager\nconst ragerHopGravityAdjustment = sgb => (sgb <= 1.05 ? 0 : (sgb - 1.05) / 0.2)\nconst ragerUtil = time => 18.11 + 13.86 * Math.tanh((time - 31.32) / 18.27)\n\nconst ragerHopIbuFromWeight = (util, alpha, wt, vol, ga, wtFactor) =>\n  (util * alpha * wt * wtFactor) / (vol * (1.0 + ga))\n\nexport const ragerHopIbu = (\n  amount: number,\n  alpha: number,\n  time: number,\n  sg: number,\n  vol: number\n) =>\n  time <= 0.0 || amount <= 0.0 || alpha < 0.0\n    ? 0\n    : ragerHopIbuFromWeight(\n        ragerUtil(Math.floor(time + 0.5)) * 0.01,\n        alpha,\n        amount,\n        vol,\n        ragerHopGravityAdjustment(sg),\n        100.0 / 1.34\n      )\n\nexport const bitternessIbuRager = (\n  hops: Array<Hop>,\n  avgBoilGravityPts: number,\n  postBoilVolume: number\n) =>\n  sum(\n    hops.map(\n      ({ amount, alpha, time, use }: Hop) =>\n        ragerHopIbu(\n          kgToOunces(amount),\n          alpha * 100,\n          time,\n          avgBoilGravityPts,\n          litersToGallons(postBoilVolume)\n        ) * aromaFactor(use)\n    )\n  )\n","// @flow\nimport {\n  originalGravity,\n  finalGravity,\n  boilGravity,\n  gravityPoints,\n  estABW,\n  estABV,\n  estABVrealExtract,\n  srmToRgb,\n  colorSRM,\n  srmToCss,\n  yeastNeeded,\n  yeastCount,\n  yeastStarterGrow,\n  carbonation,\n  calcCalories\n} from './brewcalc'\n\nimport {\n  bitternessIbuTinseth,\n  bitternessRatio,\n  ragerHopIbu,\n  bitternessIbuRager\n} from './hops'\nimport { mashRecalculate } from './mash'\nimport {\n  kgToOunces,\n  kgToPounds,\n  poundsTokg,\n  litersToOunces,\n  ouncesToLiters,\n  litersToGallons,\n  fahrenheitToCelsius,\n  celsiusToFahrenheit,\n  kpaToPsi,\n  psiTokpa,\n  sgToPlato,\n  platoTosg,\n  sum,\n  scaleRecipe,\n  srmToEbc,\n  ebcToSrm,\n  srmToLovibond,\n  lovibondToSrm,\n  capitalize,\n  isNotEmptyArray\n} from './utils'\nimport { calculateVolumes } from './volumes'\nimport { calcWaterChemistry } from './waterChem'\n\nimport { FermentableTypes } from './types/fermentable'\nimport { HopForms, HopUse } from './types/hop'\nimport { MashType } from './types/mashStep'\nimport { RecipeTypes } from './types/recipe'\nimport { YeastForms, YeastTypes } from './types/yeast'\n\nimport type { Recipe } from './types/recipe'\nimport type { RecipeBeerJSON } from './types/beerjson'\n\nconst calculateRecipeBeerJSON = ({\n  batch_size,\n  boil_size,\n  boil_time,\n  ingredients,\n  efficiency,\n  mash\n}: RecipeBeerJSON) => {\n  const batchSize = batch_size ? batch_size.value : null\n  const boilSize = boil_size ? boil_size.value : null\n  const boilTime = boil_time ? boil_time.value : null\n  const brewHouseEff = efficiency ? efficiency.brewhouse / 100 : null\n\n  let fermentables = null,\n    hops = null,\n    yeasts = null\n\n  if (ingredients) {\n    const { fermentable_bill, hop_bill, culture_additions } = ingredients\n\n    fermentables = isNotEmptyArray(fermentable_bill)\n      ? // $FlowFixMe\n        fermentable_bill.map(item => ({\n          type: capitalize(item.type),\n          amount: item.amount.value,\n          potential: (item.yield * 0.01 * 46) / 1000 + 1,\n          color: item.color.value\n        }))\n      : null\n\n    hops = isNotEmptyArray(hop_bill)\n      ? // $FlowFixMe\n        hop_bill.map(item => ({\n          amount: item.amount.value,\n          alpha: item.alpha_acid_units / 100,\n          form: capitalize(item.form),\n          time: item.time.value,\n          use: capitalize(item.use)\n        }))\n      : null\n\n    yeasts = isNotEmptyArray(culture_additions)\n      ? // $FlowFixMe\n        culture_additions.map(item => ({\n          attenuation: item.attenuation / 100\n        }))\n      : null\n  }\n\n  let mashSteps = null\n  if (mash && isNotEmptyArray(mash.mash_steps)) {\n    mashSteps = {\n      // $FlowFixMe\n      mashSteps: mash.mash_steps.map(item => ({\n        type: capitalize(item.type),\n        infuseAmount: item.infuse_amount.value\n      }))\n    }\n  }\n\n  // $FlowFixMe\n  return calculateRecipe({\n    batchSize,\n    boilSize,\n    boilTime,\n    fermentables,\n    hops,\n    yeasts,\n    efficiency: brewHouseEff,\n    // $FlowFixMe\n    mash: mashSteps\n  })\n}\n\nconst calculateRecipe = ({\n  batchSize,\n  boilSize,\n  boilTime,\n  fermentables,\n  efficiency,\n  yeasts,\n  hops,\n  mash\n}: Recipe) => {\n  let og = null,\n    fg = null,\n    ibu = null,\n    abv = null,\n    colorSRMvalue = null,\n    volumes = null\n\n  if (batchSize && fermentables && efficiency) {\n    og = originalGravity(batchSize, gravityPoints(fermentables, efficiency))\n\n    colorSRMvalue = colorSRM(fermentables, batchSize)\n\n    if (yeasts) {\n      fg = finalGravity(\n        batchSize,\n        gravityPoints(fermentables, efficiency, yeasts[0].attenuation)\n      )\n\n      abv = estABVrealExtract(Number(og.toFixed(3)), Number(fg.toFixed(2)))\n      const calories = calcCalories(\n        Number(og.toFixed(3)),\n        Number(fg.toFixed(2))\n      )\n      const caloriesInOneL = calories / (12 * ouncesToLiters(1))\n    }\n\n    if (hops && boilSize) {\n      const avgBoilGravityPts = boilGravity(batchSize, boilSize, og) - 1\n      ibu = bitternessIbuTinseth(hops, avgBoilGravityPts, batchSize)\n    }\n  }\n\n  if (mash && boilTime && fermentables && boilSize) {\n    // $FlowFixMe\n    volumes = calculateVolumes({ fermentables, mash, boilTime }, { boilSize })\n  }\n\n  return {\n    stats: {\n      og: og && Number(og.toFixed(3)),\n      fg: fg && Number(fg.toFixed(3)),\n      ibu: ibu && Number(ibu.toFixed(1)),\n      color: colorSRMvalue && Number(colorSRMvalue.toFixed(1)),\n      abv: abv && Number(abv.toFixed(1))\n    },\n    volumes\n  }\n}\n\nexport {\n  calculateRecipe,\n  calculateRecipeBeerJSON,\n  originalGravity,\n  finalGravity,\n  boilGravity,\n  gravityPoints,\n  estABW,\n  estABV,\n  estABVrealExtract,\n  srmToRgb,\n  colorSRM,\n  srmToCss,\n  yeastNeeded,\n  yeastCount,\n  yeastStarterGrow,\n  carbonation,\n  calcCalories,\n  bitternessIbuTinseth,\n  bitternessRatio,\n  ragerHopIbu,\n  bitternessIbuRager,\n  mashRecalculate,\n  kgToOunces,\n  kgToPounds,\n  poundsTokg,\n  litersToOunces,\n  ouncesToLiters,\n  litersToGallons,\n  fahrenheitToCelsius,\n  celsiusToFahrenheit,\n  kpaToPsi,\n  psiTokpa,\n  sgToPlato,\n  platoTosg,\n  srmToEbc,\n  ebcToSrm,\n  srmToLovibond,\n  lovibondToSrm,\n  sum,\n  scaleRecipe,\n  calculateVolumes,\n  calcWaterChemistry,\n  FermentableTypes,\n  RecipeTypes,\n  HopForms,\n  HopUse,\n  MashType,\n  YeastForms,\n  YeastTypes\n}\n","import type { Equipment } from './types/equipment'\nimport type { Mash } from './types/mash'\nimport { MashType } from './types/mashStep'\n\nconst grainVolume = 0.652 // l/kg\nconst maltSpecificHeat = 0.38 // Cal/gram-C\nconst tunDeadspace = 0\nconst boilTemp = 100\n\nconst calcTotVolume = (\n  grainVolume,\n  mashGrainWeight,\n  infuseAmount = 0,\n  startVolume = 0\n) => grainVolume * mashGrainWeight + infuseAmount + startVolume\n\nconst adjustTunMass = (tunVolume, totVolume, tunMass) => {\n  tunVolume = tunVolume * 0.8\n  return tunVolume > 0 && totVolume < tunVolume\n    ? (tunMass * totVolume) / tunVolume\n    : tunMass\n}\n\nconst decoctVolume = (\n  targetTemp,\n  startVolume,\n  startTemp,\n  mashGrainWeight,\n  tunMass,\n  tunSpecificHeat,\n  tunVolume,\n  boilTemp\n) => {\n  const totVolume = calcTotVolume(grainVolume, mashGrainWeight, startVolume)\n  const adjustedTunMass = adjustTunMass(tunVolume, totVolume, tunMass)\n  var fraction =\n    (((maltSpecificHeat * mashGrainWeight +\n      tunSpecificHeat * adjustedTunMass +\n      startVolume) /\n      (maltSpecificHeat * mashGrainWeight + startVolume)) *\n      (targetTemp - startTemp)) /\n    (boilTemp - startTemp)\n\n  if (fraction > 1) {\n    fraction = 1\n  }\n  return totVolume * fraction\n}\n\nconst infuseTemp = (\n  infuseAmount,\n  targetTemp,\n  startVolume,\n  startTemp,\n  mashGrainWeight,\n  tunMass,\n  tunSpecificHeat,\n  tunVolume\n) => {\n  if (infuseAmount <= 0) {\n    return targetTemp\n  }\n\n  const totVolume = calcTotVolume(\n    grainVolume,\n    mashGrainWeight,\n    infuseAmount,\n    startVolume\n  )\n  const adjustedTunMass = adjustTunMass(tunVolume, totVolume, tunMass)\n\n  return (\n    targetTemp +\n    ((maltSpecificHeat * mashGrainWeight +\n      tunSpecificHeat * adjustedTunMass +\n      startVolume) *\n      (targetTemp - startTemp)) /\n      infuseAmount\n  )\n}\n\nconst mashInTemp = (\n  infuseAmount,\n  targetTemp,\n  mashGrainWeight,\n  grainTemp,\n  tunMass,\n  tunSpecificHeat,\n  tunVolume,\n  tunTemp\n) => {\n  if (infuseAmount === 0) {\n    return targetTemp\n  }\n\n  const totVolume = calcTotVolume(grainVolume, mashGrainWeight, infuseAmount)\n  const adjustedTunMass = adjustTunMass(tunVolume, totVolume, tunMass)\n\n  return (\n    targetTemp +\n    (maltSpecificHeat * mashGrainWeight * (targetTemp - grainTemp) +\n      tunSpecificHeat * adjustedTunMass * (targetTemp - tunTemp)) /\n      infuseAmount\n  )\n}\n\nexport const mashRecalculate = (\n  { mashSteps, equipAdjust, grainTemp, tunTemp = 0 }: Mash,\n  { tunWeight = 0, tunSpecificHeat = 0, tunVolume = 0 }: Equipment,\n  mashGrainWeight: number\n) => {\n  const tunMass = !equipAdjust ? 0 : tunWeight\n  const calcInfuseStepAmount = (i, infuseAmount) =>\n    i === 0 ? infuseAmount + tunDeadspace : infuseAmount\n  const calcTotalInfusedOnStepAmount = (i, mashSteps) => {\n    return mashSteps.slice(0, i).reduce((pv, cv, index) => {\n      return cv.type !== MashType.decoction\n        ? calcInfuseStepAmount(index, cv.infuseAmount)\n        : 0\n    }, 0)\n  }\n\n  return mashSteps.map(\n    ({ name, type, infuseAmount, stepTemp }, i, mashSteps) => {\n      const infuseStepAmount = calcInfuseStepAmount(i, infuseAmount)\n      const totalInfusedOnStepAmount = calcTotalInfusedOnStepAmount(\n        i,\n        mashSteps\n      )\n\n      let result = {}\n\n      switch (type) {\n        case MashType.infusion:\n          result.infussionTemp =\n            i === 0\n              ? mashInTemp(\n                  infuseStepAmount,\n                  stepTemp,\n                  mashGrainWeight,\n                  grainTemp,\n                  tunMass,\n                  tunSpecificHeat,\n                  tunVolume,\n                  tunTemp\n                )\n              : infuseTemp(\n                  infuseStepAmount,\n                  stepTemp,\n                  totalInfusedOnStepAmount,\n                  mashSteps[i - 1].stepTemp,\n                  mashGrainWeight,\n                  tunMass,\n                  tunSpecificHeat,\n                  tunVolume\n                )\n          result.decoctionAmount = 0\n          break\n        case MashType.decoction:\n          result.infussionTemp =\n            i === 0\n              ? mashInTemp(\n                  infuseStepAmount,\n                  stepTemp,\n                  mashGrainWeight,\n                  grainTemp,\n                  tunMass,\n                  tunSpecificHeat,\n                  tunVolume,\n                  tunTemp\n                )\n              : 0\n\n          result.decoctionAmount =\n            i === 0\n              ? 0\n              : decoctVolume(\n                  stepTemp,\n                  totalInfusedOnStepAmount,\n                  mashSteps[i - 1].stepTemp,\n                  mashGrainWeight,\n                  tunMass,\n                  tunSpecificHeat,\n                  tunVolume,\n                  boilTemp\n                )\n          break\n        default:\n          break\n      }\n\n      return {\n        infuseStepAmount: infuseStepAmount,\n        infussionTemp: result.infussionTemp,\n        decoctionAmount: result.decoctionAmount\n      }\n    }\n  )\n}\n","// @flow\nexport type Fermentable = {\n  name: string,\n  color: number,\n  amount: number,\n  yield: number,\n  potential: number,\n  addAfterBoil?: boolean,\n  type: 'Grain' | 'Sugar' | 'Extract' | 'Dry Extract' | 'Adjunct'\n}\n\nexport const FermentableTypes = {\n  grain: 'Grain',\n  sugar: 'Sugar',\n  extract: 'Extract',\n  dryExtract: 'Dry Extract',\n  adjunct: 'Adjunct'\n}\n","// @flow\nexport type Hop = {\n  name: string,\n  alpha: number,\n  amount: number,\n  use: 'Boil' | 'Dry Hop' | 'Mash' | 'First Wort' | 'Aroma',\n  time: number,\n  form?: 'Pellet' | 'Plug' | 'Leaf'\n}\n\n// Hop USE May be \"Boil\", \"Dry Hop\", \"Mash\", \"First Wort\" or \"Aroma\".\n// Note that \"Aroma\" and \"Dry Hop\" do not contribute to the bitterness of the beer while the others do.\n// Aroma hops are added after the boil and do not contribute substantially to beer bitterness.\nexport const HopUse = {\n  boil: 'Boil',\n  dryHop: 'Dry Hop',\n  mash: 'Mash',\n  firstWort: 'First Wort',\n  aroma: 'Aroma'\n}\n\n// Hop FORM May be \"Pellet\", \"Plug\" or \"Leaf\"\nexport const HopForms = {\n  pellet: 'Pellet',\n  plug: 'Plug',\n  leaf: 'Leaf'\n}\n","// @flow\nexport type MashStep = {\n  name: string,\n  type: 'Infusion' | 'Temperature' | 'Decoction',\n  infuseAmount: number,\n  stepTemp: number,\n  stepTime: number,\n  rampTime?: number,\n  endTemp?: number\n}\n// Mash type May be “Infusion”, “Temperature” or “Decoction” depending on the type of step.\n// Infusion denotes adding hot water, Temperature denotes heating with an outside heat source, and decoction denotes drawing off some mash for boiling.\nexport const MashType = {\n  infusion: 'Infusion',\n  temperature: 'Temperature',\n  decoction: 'Decoction'\n}\n","// @flow\nimport type { Fermentable } from './fermentable'\nimport type { Yeast } from './yeast'\nimport type { Hop } from './hop'\nimport type { Mash } from './mash'\n\nexport type Recipe = {\n  name: string,\n  brewer: string,\n  type: 'Extract' | 'All Grain' | 'Partial Mash',\n  batchSize: number,\n  boilSize: number,\n  boilTime: number,\n  efficiency: number,\n  hops: Array<Hop>,\n  fermentables: Array<Fermentable>,\n  yeasts: Array<Yeast>,\n  mash: Mash\n}\n\nexport const RecipeTypes = {\n  extract: 'Extract',\n  partialMash: 'Partial Mash',\n  allGrain: 'All Grain'\n}\n","// @flow\nexport type Yeast = {\n  name: string,\n  amount: number,\n  attenuation?: number,\n  form: 'Liquid' | 'Dry' | 'Slant' | 'Culture',\n  type: 'Ale' | 'Lager' | 'Wheat' | 'Wine' | 'Champagne',\n  cultureDate?: string\n}\n\nexport const YeastTypes = {\n  ale: 'Ale',\n  lager: 'Lager',\n  wheat: 'Wheat',\n  wine: 'Wine',\n  champagne: 'Champagne'\n}\nexport const YeastForms = {\n  liquid: 'Liquid',\n  dry: 'Dry',\n  slant: 'Slant',\n  culture: 'Culture'\n}\n","// @flow\nimport type { Recipe } from './types/recipe'\nimport type { Equipment } from './types/equipment'\n\nexport const kgToOunces = (k: number) => k * 35.2739619\n\nexport const kgToPounds = (k: number) => kgToOunces(k) / 16\n\nexport const poundsTokg = (p: number) => p / 2.204\n\nexport const litersToOunces = (l: number) => l / 0.0295735\n\nexport const ouncesToLiters = (o: number) => o * 0.0295735\n\nexport const litersToGallons = (l: number) => litersToOunces(l) / 128\n\nexport const fahrenheitToCelsius = (f: number) => (f - 32) / 1.8\n\nexport const celsiusToFahrenheit = (c: number) => c * 1.8 + 32\n\nexport const kpaToPsi = (kpa: number) => kpa * 0.14503773773020923\n\nexport const psiTokpa = (psi: number) => psi * 6.894757293168361\n\nexport const sgToPlato = (sg: number) =>\n  -668.962 + 1262.45 * sg - 776.43 * Math.pow(sg, 2) + 182.94 * Math.pow(sg, 3)\n\nexport const platoTosg = (e: number) => 1 + e / (258.6 - (e / 258.2) * 227.1)\n\nexport const srmToEbc = (srm: number) => srm * 1.97\n\nexport const ebcToSrm = (ebc: number) => ebc * 0.508\n\nexport const srmToLovibond = (srm: number) => (srm + 0.76) / 1.3546\n\nexport const lovibondToSrm = (lovibond: number) => 1.3546 * lovibond - 0.76\n\nexport const sum = (array: Array<number>) =>\n  array.reduce((pv, cv) => pv + cv, 0)\n\nconst scaleIngredients = (scaleFactor: number, ingredients: any) =>\n  ingredients.map(i => {\n    return {\n      ...i,\n      amount: scaleFactor * i.amount\n    }\n  })\n\nexport const scaleRecipe = (r: Recipe, { batchSize }: Equipment) => {\n  const scaleFactor: number = batchSize / r.batchSize\n\n  return {\n    ...r,\n    batchSize: batchSize,\n    fermentables: scaleIngredients(scaleFactor, r.fermentables),\n    hops: scaleIngredients(scaleFactor, r.hops)\n  }\n}\n\nexport const capitalize = (str: string): string => {\n  const words: Array<string> = str.split(' ')\n  const capitalizedWords: Array<string> = words.map(\n    word => word.charAt(0).toUpperCase() + word.slice(1)\n  )\n  return capitalizedWords.join(' ')\n}\n\nexport const isNotEmptyArray = (arr: ?Array<Object>): boolean => {\n  if (Array.isArray(arr)) {\n    return arr.length > 0\n  }\n  return false\n}\n","// @flow\nimport { sum, kgToOunces, ouncesToLiters } from './utils.js'\nimport { FermentableTypes } from './types/fermentable'\nimport { MashType } from './types/mashStep'\nimport type { Recipe } from './types/recipe'\nimport type { Equipment } from './types/equipment'\n\nexport const calculateVolumes = (\n  { fermentables, mash, boilTime }: Recipe,\n  {\n    boilSize,\n    lauterDeadspace = 0,\n    evapRate = 0,\n    coolingLossPct = 0,\n    trubChillerLoss = 0,\n    topUpKettle = 0,\n    BIAB\n  }: Equipment\n) => {\n  const starterSize = 0\n  const fermentationLoss = 1.7\n\n  const mashGrainWeight = sum(\n    fermentables.map(({ amount, type }) =>\n      type === FermentableTypes.grain ? amount : 0\n    )\n  )\n  const grainAbsorbtionRatio = BIAB ? 0.586 : 0.96 // number of ounces of water absorbed per ounce of the grain\n\n  const grainAbsorbtion = ouncesToLiters(\n    kgToOunces(mashGrainWeight) * grainAbsorbtionRatio\n  )\n\n  const totalMashWaterAdds =\n    lauterDeadspace +\n    sum(\n      mash.mashSteps.map(({ type, infuseAmount }) =>\n        type !== MashType.decoction ? infuseAmount : 0\n      )\n    )\n\n  // https://byo.com/bock/item/410-calculating-water-usage-advanced-brewing\n  // Total mash volume = volume of water + volume of grain\n  // Of course first it is necessary to know the volume that the grain displaces when mashed (which is different from its dry volume).\n  // Once again this depends on the specifics of the grain bill, but a value of 0.32 quarts per pound (0.67 L/kg) is a reasonable average.\n  const mashVolumeNeeded = totalMashWaterAdds + mashGrainWeight * 0.67\n\n  const waterAvailFromMash = totalMashWaterAdds - grainAbsorbtion\n\n  const spargeVol =\n    boilSize +\n    grainAbsorbtion -\n    topUpKettle +\n    lauterDeadspace -\n    totalMashWaterAdds\n\n  const estPreBoilVolume = waterAvailFromMash + (spargeVol - lauterDeadspace)\n  const boilOffVolume = estPreBoilVolume * evapRate * (boilTime / 60)\n  const postBoilVolume = estPreBoilVolume - boilOffVolume\n  const coolingShrinkage = postBoilVolume * coolingLossPct\n\n  const estBottlingVol =\n    postBoilVolume -\n    coolingShrinkage -\n    trubChillerLoss -\n    starterSize -\n    fermentationLoss\n\n  const totalWater = totalMashWaterAdds + spargeVol\n\n  return {\n    totalWater,\n    // Mashing\n    mashGrainWeight,\n    grainAbsorbtion,\n    totalMashWaterAdds,\n    mashVolumeNeeded,\n    waterAvailFromMash,\n    spargeVol,\n    // Boiling\n    estPreBoilVolume,\n    boilOffVolume,\n    postBoilVolume,\n    coolingShrinkage,\n    // Fermenting\n    estBottlingVol\n  }\n}\n","// @flow\nimport type { Water } from './types/water'\nimport type { SaltAdditions } from './types/saltAdditions'\n\nimport { litersToGallons } from './utils.js'\n\nconst dilute = (value: number, dilution: number) =>\n  Math.round(value * (1 - dilution))\n\nconst alkalinity = (value: number, dilution: number = 0) =>\n  Math.round(value * (1 - dilution) * (50 / 61))\n\nconst adjustmentsFromSalts = (\n  batchSize: number,\n  { CaCO3, NaHCO3, CaSO4, CaCl2, MgSO4, NaCl }: SaltAdditions\n) => {\n  let adjCa = 0\n  let adjMg = 0\n  let adjSO4 = 0\n  let adjNa = 0\n  let adjCl = 0\n  let adjHCO3 = 0\n\n  CaCO3 = CaCO3 / 2\n\n  if (CaCO3 > 0) {\n    adjCa = adjCa + (105 * CaCO3) / batchSize\n    adjHCO3 = adjHCO3 + (321 * CaCO3) / batchSize\n  }\n  if (NaHCO3 > 0) {\n    adjNa = adjNa + (75 * NaHCO3) / batchSize\n    adjHCO3 = adjHCO3 + (191 * NaHCO3) / batchSize\n  }\n  if (CaSO4 > 0) {\n    adjCa = adjCa + (61.5 * CaSO4) / batchSize\n    adjSO4 = adjSO4 + (147.4 * CaSO4) / batchSize\n  }\n  if (CaCl2 > 0) {\n    adjCa = adjCa + (72 * CaCl2) / batchSize\n    adjCl = adjCl + (127 * CaCl2) / batchSize\n  }\n  if (MgSO4 > 0) {\n    adjMg = adjMg + (26 * MgSO4) / batchSize\n    adjSO4 = adjSO4 + (103 * MgSO4) / batchSize\n  }\n  if (NaCl > 0) {\n    adjNa = adjNa + (104 * NaCl) / batchSize\n    adjCl = adjCl + (160 * NaCl) / batchSize\n  }\n  return {\n    name: 'adjustmentsFromSalts',\n    Ca: Math.round(adjCa),\n    Mg: Math.round(adjMg),\n    SO4: Math.round(adjSO4),\n    Na: Math.round(adjNa),\n    Cl: Math.round(adjCl),\n    HCO3: Math.round(adjHCO3),\n    alkalinity: alkalinity(Math.round(adjHCO3))\n  }\n}\n\nexport const calcWaterChemistry = (\n  batchSize: number,\n  dilution: number,\n  source: Water,\n  target: Water,\n  salts: SaltAdditions\n) => {\n  const adjustmentsFromSaltsWater: Water = adjustmentsFromSalts(\n    litersToGallons(batchSize),\n    {\n      ...salts\n    }\n  )\n\n  const dilutedWater: Water = {\n    name: 'dilutedWater',\n    Ca: dilute(source.Ca, dilution),\n    Mg: dilute(source.Mg, dilution),\n    SO4: dilute(source.SO4, dilution),\n    Na: dilute(source.Na, dilution),\n    Cl: dilute(source.Cl, dilution),\n    HCO3: dilute(source.HCO3, dilution),\n    alkalinity: alkalinity(source.HCO3, dilution)\n  }\n\n  const adjustedWater: Water = {\n    name: 'adjustedWater',\n    Ca: dilutedWater.Ca + adjustmentsFromSaltsWater.Ca,\n    Mg: dilutedWater.Mg + adjustmentsFromSaltsWater.Mg,\n    SO4: dilutedWater.SO4 + adjustmentsFromSaltsWater.SO4,\n    Na: dilutedWater.Na + adjustmentsFromSaltsWater.Na,\n    Cl: dilutedWater.Cl + adjustmentsFromSaltsWater.Cl,\n    HCO3: dilutedWater.HCO3 + adjustmentsFromSaltsWater.HCO3,\n    alkalinity: alkalinity(dilutedWater.HCO3 + adjustmentsFromSaltsWater.HCO3)\n  }\n\n  const difference: Water = {\n    name: 'difference source water from target',\n    Ca: adjustedWater.Ca - target.Ca,\n    Mg: adjustedWater.Mg - target.Mg,\n    SO4: adjustedWater.SO4 - target.SO4,\n    Na: adjustedWater.Na - target.Na,\n    Cl: adjustedWater.Cl - target.Cl,\n    HCO3: adjustedWater.HCO3 - target.HCO3,\n    alkalinity: alkalinity(adjustedWater.HCO3 - target.HCO3)\n  }\n\n  return {\n    adjustedWater: adjustedWater,\n    dilutedWater: dilutedWater,\n    adjustmentsFromSalts: adjustmentsFromSaltsWater,\n    difference: difference,\n    sulphateChlorideRatio: adjustedWater.SO4 / adjustedWater.Cl\n  }\n}\n"],"sourceRoot":""}